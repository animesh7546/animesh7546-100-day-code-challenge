Given a string s, find the length of the longest substring without repeating characters.
Test Case 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Test Case 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Test Case 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
code:-
class Solution {
    public int lengthOfLongestSubstring(String s) {
      int maxlen = 0;
int left = 0 ;
int charCount[] = new int[128];
for(int right = 0 ; right < s.length() ; right++){
charCount[s.charAt(right)]++;

        while(charCount[s.charAt(right)] > 1){
            charCount[s.charAt(left++)]--;
        }
        maxlen = Math.max(maxlen , right - left +1);
    }
    return maxlen;
}  
    }
